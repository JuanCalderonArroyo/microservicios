from flask import Flask, request, jsonify, render_template
import requests
import uuid

app = Flask(__name__)

# Configuración
AUTH_BASE_URL = "https://roble-api.openlab.uninorte.edu.co/auth/probando_49357d021e"
DATABASE_BASE_URL = "https://roble-api.openlab.uninorte.edu.co/database/probando_49357d021e"

# Almacenamiento temporal de tokens
user_sessions = {}

def make_auth_request(endpoint, data=None, headers=None, method='POST'):
    """Función auxiliar para hacer peticiones a la API de autenticación"""
    url = f"{AUTH_BASE_URL}/{endpoint}"
    
    try:
        if method == 'POST':
            response = requests.post(url, json=data, headers=headers)
        elif method == 'GET':
            response = requests.get(url, headers=headers)
        
        return response.json(), response.status_code
    except Exception as e:
        return {"error": str(e)}, 500

@app.route('/')
def index():
    """Página principal con interfaz web"""
    return '''
    <!DOCTYPE html>
    <html>
    <head>
        <title>Sistema de Autenticación Roble</title>
        <style>
            body { font-family: Arial, sans-serif; margin: 40px; }
            .container { max-width: 800px; margin: 0 auto; }
            .form-group { margin-bottom: 15px; }
            label { display: block; margin-bottom: 5px; font-weight: bold; }
            input[type="text"], input[type="password"], input[type="email"] { 
                width: 100%; padding: 10px; margin-bottom: 10px; border: 1px solid #ddd; border-radius: 4px; 
            }
            button { 
                background-color: #007bff; color: white; padding: 12px 24px; 
                border: none; border-radius: 4px; cursor: pointer; margin: 5px;
                font-size: 14px;
            }
            button:hover { background-color: #0056b3; }
            .result { 
                margin-top: 20px; padding: 15px; border-radius: 4px; 
                background-color: #f8f9fa; border: 1px solid #dee2e6; 
                white-space: pre-wrap; word-wrap: break-word;
            }
            .tab { overflow: hidden; border: 1px solid #ccc; background-color: #f1f1f1; }
            .tab button { 
                background-color: inherit; float: left; border: none; outline: none; 
                cursor: pointer; padding: 14px 16px; transition: 0.3s; font-size: 16px;
            }
            .tab button:hover { background-color: #ddd; }
            .tab button.active { background-color: #ccc; }
            .tabcontent { display: none; padding: 20px; border: 1px solid #ccc; border-top: none; }
            .token-info { background: #e9f7ef; padding: 10px; border-radius: 4px; margin: 10px 0; }
            .error { background: #f8d7da; color: #721c24; padding: 10px; border-radius: 4px; }
            .success { background: #d1ecf1; color: #0c5460; padding: 10px; border-radius: 4px; }
            small { color: #666; font-size: 12px; }
        </style>
    </head>
    <body>
        <div class="container">
            <h1>🔐 Sistema de Autenticación Roble</h1>
            
            <div class="tab">
                <button class="tablinks" onclick="openTab(event, 'Login')">Login</button>
                <button class="tablinks" onclick="openTab(event, 'Signup')">Crear Cuenta</button>
                <button class="tablinks" onclick="openTab(event, 'Operations')">Operaciones</button>
                <button class="tablinks" onclick="openTab(event, 'Info')">Información</button>
            </div>

            <!-- Tab de Login -->
            <div id="Login" class="tabcontent">
                <h3>Iniciar Sesión</h3>
                <form onsubmit="login(event)">
                    <div class="form-group">
                        <label>Email:</label>
                        <input type="email" id="loginEmail" required placeholder="usuario@ejemplo.com">
                    </div>
                    <div class="form-group">
                        <label>Password:</label>
                        <input type="password" id="loginPassword" required placeholder="Tu contraseña">
                    </div>
                    <button type="submit">Iniciar Sesión</button>
                </form>
                <div id="loginResult" class="result"></div>
            </div>

            <!-- Tab de Signup -->
            <div id="Signup" class="tabcontent">
                <h3>Crear Nueva Cuenta</h3>
                <form onsubmit="signup(event)">
                    <div class="form-group">
                        <label>Nombre completo:</label>
                        <input type="text" id="signupName" required placeholder="Tu nombre completo">
                    </div>
                    <div class="form-group">
                        <label>Email:</label>
                        <input type="email" id="signupEmail" required placeholder="usuario@ejemplo.com">
                    </div>
                    <div class="form-group">
                        <label>Password:</label>
                        <input type="password" id="signupPassword" required placeholder="Contraseña segura">
                        <small>La contraseña debe contener: al menos 8 caracteres, una mayúscula, una minúscula, un número y un símbolo</small>
                    </div>
                    <button type="submit">Crear Cuenta</button>
                </form>
                <div id="signupResult" class="result"></div>
            </div>

            <!-- Tab de Operaciones -->
            <div id="Operations" class="tabcontent">
                <h3>Operaciones con Token</h3>
                
                <div class="form-group">
                    <label>Access Token (obtenido del login):</label>
                    <textarea id="accessToken" rows="3" style="width: 100%;" placeholder="Pega aquí el accessToken obtenido en el login"></textarea>
                </div>
                
                <div class="form-group">
                    <label>Refresh Token (obtenido del login):</label>
                    <textarea id="refreshToken" rows="2" style="width: 100%;" placeholder="Pega aquí el refreshToken obtenido en el login"></textarea>
                </div>

                <h4>Operaciones de Autenticación</h4>
                <button onclick="verifyToken()">Verificar Token</button>
                <button onclick="refreshToken()">Refrescar Token</button>
                <button onclick="logout()">Cerrar Sesión</button>
                
                <h4>Operaciones de Base de Datos</h4>
                <button onclick="createTable()">Crear Tabla</button>
                <button onclick="deleteTable()">Eliminar Tabla</button>
                
                <div id="operationsResult" class="result"></div>
            </div>

            <!-- Tab de Información -->
            <div id="Info" class="tabcontent">
                <h3>Información del Sistema</h3>
                <div class="token-info">
                    <h4>🔑 Cómo usar:</h4>
                    <ol>
                        <li>Ve a la pestaña <strong>Login</strong> para iniciar sesión</li>
                        <li>Si no tienes cuenta, ve a <strong>Crear Cuenta</strong></li>
                        <li>Después del login, copia los tokens en la pestaña <strong>Operaciones</strong></li>
                        <li>Usa los botones para realizar operaciones con los tokens</li>
                    </ol>
                </div>
                
                <div class="token-info">
                    <h4>📝 Respuesta de Login esperada:</h4>
                    <pre>
{
    "accessToken": "eyJhbGciOiJ...",
    "refreshToken": "eyJhbGciOiJ...",
    "user": {
        "email": "usuario@ejemplo.com",
        "name": "Nombre Usuario"
    }
}</pre>
                </div>
            </div>
        </div>

        <script>
            // Funciones para las pestañas
            function openTab(evt, tabName) {
                var i, tabcontent, tablinks;
                tabcontent = document.getElementsByClassName("tabcontent");
                for (i = 0; i < tabcontent.length; i++) {
                    tabcontent[i].style.display = "none";
                }
                tablinks = document.getElementsByClassName("tablinks");
                for (i = 0; i < tablinks.length; i++) {
                    tablinks[i].className = tablinks[i].className.replace(" active", "");
                }
                document.getElementById(tabName).style.display = "block";
                evt.currentTarget.className += " active";
            }

            // Mostrar la pestaña de Login por defecto
            document.getElementsByClassName("tablinks")[0].click();

            // Función para mostrar resultados
            function showResult(elementId, data) {
                const element = document.getElementById(elementId);
                if (typeof data === 'object') {
                    element.innerHTML = '<pre>' + JSON.stringify(data, null, 2) + '</pre>';
                } else {
                    element.innerHTML = data;
                }
            }

            // Función de login
            async function login(event) {
                event.preventDefault();
                const email = document.getElementById('loginEmail').value;
                const password = document.getElementById('loginPassword').value;

                try {
                    const response = await fetch('/login', {
                        method: 'POST',
                        headers: {'Content-Type': 'application/json'},
                        body: JSON.stringify({email, password})
                    });
                    const data = await response.json();
                    
                    if (response.ok) {
                        showResult('loginResult', data);
                        // Rellenar automáticamente los tokens si están disponibles
                        if (data.accessToken) {
                            document.getElementById('accessToken').value = data.accessToken;
                        }
                        if (data.refreshToken) {
                            document.getElementById('refreshToken').value = data.refreshToken;
                        }
                        // Cambiar a la pestaña de operaciones
                        openTab(event, 'Operations');
                    } else {
                        showResult('loginResult', data);
                    }
                } catch (error) {
                    showResult('loginResult', {error: error.toString()});
                }
            }

            // Función de signup
            async function signup(event) {
                event.preventDefault();
                const name = document.getElementById('signupName').value;
                const email = document.getElementById('signupEmail').value;
                const password = document.getElementById('signupPassword').value;

                try {
                    const response = await fetch('/signup', {
                        method: 'POST',
                        headers: {'Content-Type': 'application/json'},
                        body: JSON.stringify({email, password, name})
                    });
                    const data = await response.json();
                    showResult('signupResult', data);
                } catch (error) {
                    showResult('signupResult', {error: error.toString()});
                }
            }

            // Función para verificar token (GET)
            async function verifyToken() {
                const accessToken = document.getElementById('accessToken').value.trim();
                if (!accessToken) {
                    alert('Por favor ingresa un Access Token');
                    return;
                }

                try {
                    const response = await fetch(/verify-token?access_token=${encodeURIComponent(accessToken)});
                    const data = await response.json();
                    showResult('operationsResult', data);
                } catch (error) {
                    showResult('operationsResult', {error: error.toString()});
                }
            }

            // Función para refrescar token
            async function refreshToken() {
                const refreshToken = document.getElementById('refreshToken').value.trim();
                if (!refreshToken) {
                    alert('Por favor ingresa un Refresh Token');
                    return;
                }

                try {
                    const response = await fetch('/refresh-token', {
                        method: 'POST',
                        headers: {'Content-Type': 'application/json'},
                        body: JSON.stringify({refresh_token: refreshToken})
                    });
                    const data = await response.json();
                    showResult('operationsResult', data);
                    
                    // Actualizar el access token si se recibió uno nuevo
                    if (data.accessToken) {
                        document.getElementById('accessToken').value = data.accessToken;
                    }
                    if (data.refreshToken) {
                        document.getElementById('refreshToken').value = data.refreshToken;
                    }
                } catch (error) {
                    showResult('operationsResult', {error: error.toString()});
                }
            }

            // Función para logout
            async function logout() {
                const accessToken = document.getElementById('accessToken').value.trim();
                if (!accessToken) {
                    alert('Por favor ingresa un Access Token');
                    return;
                }

                try {
                    const response = await fetch('/logout', {
                        method: 'POST',
                        headers: {'Content-Type': 'application/json'},
                        body: JSON.stringify({access_token: accessToken})
                    });
                    const data = await response.json();
                    showResult('operationsResult', data);
                    
                    // Limpiar los tokens después del logout
                    if (response.ok) {
                        document.getElementById('accessToken').value = '';
                        document.getElementById('refreshToken').value = '';
                    }
                } catch (error) {
                    showResult('operationsResult', {error: error.toString()});
                }
            }

            // Función para crear tabla
            async function createTable() {
                const accessToken = document.getElementById('accessToken').value.trim();
                if (!accessToken) {
                    alert('Por favor ingresa un Access Token');
                    return;
                }

                const tableName = prompt('Nombre de la tabla:') || 'mi_tabla';
                
                try {
                    const response = await fetch('/database/create-table', {
                        method: 'POST',
                        headers: {'Content-Type': 'application/json'},
                        body: JSON.stringify({
                            access_token: accessToken,
                            table_name: tableName,
                            description: 'Tabla creada desde interfaz web'
                        })
                    });
                    const data = await response.json();
                    showResult('operationsResult', data);
                } catch (error) {
                    showResult('operationsResult', {error: error.toString()});
                }
            }

            // Función para eliminar tabla
            async function deleteTable() {
                const accessToken = document.getElementById('accessToken').value.trim();
                if (!accessToken) {
                    alert('Por favor ingresa un Access Token');
                    return;
                }

                const tableName = prompt('Nombre de la tabla a eliminar:') || 'mi_tabla';
                
                try {
                    const response = await fetch(/database/delete-table/${tableName}?access_token=${encodeURIComponent(accessToken)}, {
                        method: 'DELETE'
                    });
                    const data = await response.json();
                    showResult('operationsResult', data);
                } catch (error) {
                    showResult('operationsResult', {error: error.toString()});
                }
            }
        </script>
    </body>
    </html>
    '''

# Endpoints del API actualizados para trabajar directamente con tokens
@app.route('/login', methods=['POST'])
def login():
    """Endpoint para iniciar sesión"""
    data = request.get_json()
    
    if not data or 'email' not in data or 'password' not in data:
        return jsonify({"error": "Se requieren email y password"}), 400
    
    user_data, status_code = make_auth_request('login', {
        "email": data['email'],
        "password": data['password']
    })
    
    # Devolver directamente la respuesta de Roble
    return jsonify(user_data), status_code

@app.route('/signup', methods=['POST'])
def signup():
    """Endpoint para crear cuenta"""
    data = request.get_json()
    
    if not data or 'email' not in data or 'password' not in data or 'name' not in data:
        return jsonify({"error": "Se requieren email, password y name"}), 400
    
    user_data, status_code = make_auth_request('signup-direct', {
        "email": data['email'],
        "password": data['password'],
        "name": data['name']
    })
    
    return jsonify(user_data), status_code

@app.route('/verify-token', methods=['GET'])
def verify_token():
    """Endpoint para verificar el token"""
    access_token = request.args.get('access_token')
    
    if not access_token:
        return jsonify({"error": "Se requiere access_token"}), 400
    
    # Verificar el token con la API de Roble
    url = f"{AUTH_BASE_URL}/verify-token"
    headers = {"Authorization": f"Bearer {access_token}"}
    
    try:
        response = requests.get(url, headers=headers)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

@app.route('/refresh-token', methods=['POST'])
def refresh_token():
    """Endpoint para refrescar el token"""
    data = request.get_json()
    
    if not data or 'refresh_token' not in data:
        return jsonify({"error": "Se requiere refresh_token"}), 400
    
    refresh_token_value = data['refresh_token']
    
    # Hacer refresh del token con Roble
    new_tokens, status_code = make_auth_request('refresh-token', {
        "refreshToken": refresh_token_value
    })
    
    return jsonify(new_tokens), status_code

@app.route('/logout', methods=['POST'])
def logout():
    """Endpoint para cerrar sesión"""
    data = request.get_json()
    
    if not data or 'access_token' not in data:
        return jsonify({"error": "Se requiere access_token"}), 400
    
    access_token = data['access_token']
    
    # Hacer logout en la API de Roble
    url = f"{AUTH_BASE_URL}/logout"
    headers = {"Authorization": f"Bearer {access_token}"}
    
    try:
        response = requests.post(url, headers=headers)
        return jsonify({
            "message": "Logout exitoso",
            "api_response": response.json() if response.content else {"message": "Logout completado"}
        }), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

@app.route('/database/create-table', methods=['POST'])
def create_table():
    """Endpoint para crear tabla en la base de datos"""
    data = request.get_json()
    
    if not data or 'access_token' not in data or 'table_name' not in data:
        return jsonify({"error": "Se requieren access_token y table_name"}), 400
    
    access_token = data['access_token']
    table_data = {
        "tableName": data['table_name'],
        "description": data.get('description', 'Tabla creada desde microservicio'),
        "columns": data.get('columns', [
            {"name": "id", "type": "integer", "isPrimary": True},
            {"name": "nombre", "type": "varchar"}
        ])
    }
    
    url = f"{DATABASE_BASE_URL}/create-table"
    headers = {"Authorization": f"Bearer {access_token}"}
    
    try:
        response = requests.post(url, headers=headers, json=table_data)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

@app.route('/database/delete-table/<table_name>', methods=['DELETE'])
def delete_table(table_name):
    """Endpoint para eliminar tabla de la base de datos"""
    access_token = request.args.get('access_token')
    
    if not access_token:
        return jsonify({"error": "Se requiere access_token como parámetro"}), 400
    
    url = f"{DATABASE_BASE_URL}/{table_name}/usuarios"
    headers = {"Authorization": f"Bearer {access_token}"}
    
    try:
        response = requests.delete(url, headers=headers)
        if response.content:
            return jsonify(response.json()), response.status_code
        else:
            return jsonify({"message": "Tabla eliminada exitosamente"}), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

@app.route('/health', methods=['GET'])
def health_check():
    """Endpoint para verificar el estado del servicio"""
    return jsonify({"status": "Servicio de autenticación Roble funcionando correctamente"}), 200

if _name_ == '_main_':
    app.run(host='0.0.0.0', port=5000)